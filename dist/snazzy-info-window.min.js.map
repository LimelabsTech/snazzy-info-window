{"version":3,"sources":["snazzy-info-window.js"],"names":["copyKeys","target","source","Object","keys","forEach","key","mergeDefaultOptions","opts","copy","_defaultOptions","obj","_typeof","objCopy","parseAttribute","attribute","defaultValue","re","test","match","exec","value","units","original","setHTML","container","content","firstChild","removeChild","innerHTML","appendChild","oppositePlacement","p","capitalizePlacement","charAt","toUpperCase","slice","toLatLng","v","undefined","google","maps","LatLng","lat","lng","_defaultShadow","h","blur","spread","color","placement","pointer","openOnMarkerClick","openOnMarkerMouseover","closeOnMapClick","closeWhenOthersOpen","showCloseButton","panOnOpen","edgeOffset","top","right","bottom","left","SnazzyInfoWindow","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","_html","_opts","_callbacks","callbacks","_marker","marker","_map","map","_position","position","_isOpen","_listeners","trackListener","event","addListener","getMap","open","offset","String","toLowerCase","border","shadow","callback","lambda","apply","listener","persistent","push","clearPersistent","e","removeListener","filter","result","activateCallback","setMap","clearListeners","latLng","draw","resize","reposition","wrapper","style","marginLeft","marginTop","bg","backgroundColor","contentWrapper","pointerBg","padding","shadowFrame","borderRadius","fontSize","fontColor","shadowPointer","width","height","pointerBorder","borderWidth","bWidth","Math","round","offsetWidth","clientWidth","pLength","min","offsetHeight","triangleDiff","reverseP","borderColor","isSet","hOffset","vOffset","formatBoxShadow","boxShadow","hRotated","vRotated","shadowPointerInner","opacity","shadowWrapper","divPixel","getProjection","fromLatLngToDivPixel","floatWrapper","floor","y","x","trigger","_eventPrefix","_this2","applyCss","element","args","i","length","className","newElement","_len","arguments","Array","_key","document","createElement","wrapperClass","closeButtonMarkup","d","closeButton","setAttribute","getPanes","floatPane","close","other","_previousWidth","_previousHeight","getDiv","ow","oh","pw","ph","addDomListener","cancelBubble","stopPropagation","parent","parentElement","mb","getBoundingClientRect","mib","getMapInnerBounds","wb","dx","dy","panBy","maxWidth","maxHeight","OverlayView"],"mappings":"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","file":"snazzy-info-window.min.js","sourcesContent":["// Global variables\nconst _classPrefix = 'si-';\nconst _root2 = 1.41421356237;\nconst _inverseRoot2 = 0.7071067811865474;\nconst _eventPrefix = 'snazzy-info-window-';\nconst _defaultShadow = {\n    h: '0px',\n    v: '3px',\n    blur: '6px',\n    spread: '0px',\n    color: '#000'\n};\nconst _defaultOptions = {\n    placement: 'top',\n    pointer: true,\n    openOnMarkerClick: false,\n    openOnMarkerMouseover: true,\n    closeOnMapClick: true,\n    closeWhenOthersOpen: false,\n    showCloseButton: true,\n    panOnOpen: true,\n    edgeOffset: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n    }\n};\n\n// Copy keys from the source into the target\nfunction copyKeys(target, source) {\n    if (target && source) {\n        Object.keys(source).forEach((key) => {\n            target[key] = source[key];\n        });\n    }\n}\n\n// We need to safely merge options from the defaults. This will make\n// sure settings like edgeOffset are properly assigned.\nfunction mergeDefaultOptions(opts) {\n    const copy = {};\n    copyKeys(copy, _defaultOptions);\n    copyKeys(copy, opts);\n    Object.keys(_defaultOptions).forEach((key) => {\n        const obj = _defaultOptions[key];\n        if (typeof obj === 'object') {\n            const objCopy = {};\n            copyKeys(objCopy, obj);\n            copyKeys(objCopy, copy[key]);\n            copy[key] = objCopy;\n        }\n    });\n    return copy;\n}\n\n// Parse a css attribute into the numeric portion and the units\nfunction parseAttribute(attribute, defaultValue) {\n    // 1em, 1.0em, 0.1em, .1em, 1.    em\n    const re = /^(-{0,1}\\.{0,1}\\d+(\\.\\d+)?)[\\s|\\.]*(\\w*)$/;\n    if (attribute && re.test(attribute)) {\n        const match = re.exec(attribute);\n        const number = match[1];\n        const units = match[3] || 'px';\n        return {value: number * 1, units, original: attribute};\n    }\n    if (defaultValue) {\n        return parseAttribute(defaultValue);\n    }\n    return {original: defaultValue};\n}\n\n// Set the html of a container. Should support both raw text and a single\n// DOM Element.\nfunction setHTML(container, content) {\n    if (container) {\n        // Clear out everything in the container\n        while (container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n        if (content) {\n            if (typeof content === 'string') {\n                container.innerHTML = content;\n            } else {\n                container.appendChild(content);\n            }\n        }\n    }\n}\n\n// Get the opposite of a given placement\nfunction oppositePlacement(p) {\n    if (p === 'top') {\n        return 'bottom';\n    } else if (p === 'bottom') {\n        return 'top';\n    } else if (p === 'left') {\n        return 'right';\n    } else if (p === 'right') {\n        return 'left';\n    }\n    return p;\n}\n\n// Return the placement with the first letter capitalized\nfunction capitalizePlacement(p) {\n    return p.charAt(0).toUpperCase() + p.slice(1);\n}\n\n// Convert the value into a Google Map LatLng\nfunction toLatLng(v) {\n    if (v !== undefined && v !== null && google) {\n        if (v instanceof google.maps.LatLng) {\n            return v;\n        } else if (v.lat !== undefined && v.lng !== undefined) {\n            return new google.maps.LatLng(v);\n        }\n    }\n    return null;\n}\n\nexport default class SnazzyInfoWindow extends google.maps.OverlayView {\n\n    constructor(opts) {\n        super(opts);\n        // Private properties\n        this._html = null;\n        this._opts = mergeDefaultOptions(opts);\n        this._callbacks = this._opts.callbacks || {};\n        this._marker = this._opts.marker;\n        this._map = this._opts.map;\n        this._position = toLatLng(this._opts.position);\n        this._isOpen = false;\n        this._listeners = [];\n\n        // This listener remains active when the info window is closed.\n        if (google && this._marker && this._opts.openOnMarkerClick) {\n            this.trackListener(google.maps.event.addListener(this._marker, 'click', () => {\n                if (!this.getMap()) {\n                    this.open();\n                }\n            }), true);\n        }\n\n        // This listener remains active when the info window is closed.\n        if (google && this._marker && this._opts.openOnMarkerMouseover) {\n            this.trackListener(google.maps.event.addListener(this._marker, 'mouseover', () => {\n                if (!this.getMap()) {\n                    this.open();\n                }\n            }), true);\n        }\n\n        // When using a position the default option for the offset is 0\n        if (this._position && !this._opts.offset) {\n            this._opts.offset = {\n                top: '0px',\n                left: '0px'\n            };\n        }\n\n        // Validate the placement option\n        let p = opts.placement || this._opts.position;\n        // The position variable was renamed to placement so we must type check\n        if (typeof p === 'string' || p instanceof String) {\n            p = p.toLowerCase();\n        }\n        if (p !== 'top' && p !== 'bottom' &&\n            p !== 'left' && p !== 'right') {\n            this._opts.placement = _defaultOptions.placement;\n        } else {\n            this._opts.placement = p;\n        }\n\n        // Validate the position option\n        p = this._opts.position;\n        if (p !== undefined && p !== null &&\n            typeof p !== 'string' && !(p instanceof String)) {\n            this._opts.position = p;\n        }\n\n        // Validate the other options\n        if (this._opts.border === undefined || this._opts.border === true) {\n            this._opts.border = {};\n        }\n        if (this._opts.pointer === undefined) {\n            this._opts.pointer = _defaultOptions.pointer;\n        }\n        if (this._opts.shadow === undefined || this._opts.shadow === true) {\n            this._opts.shadow = {};\n        }\n    }\n\n    // Activate the specified callback and return the result\n    activateCallback(callback) {\n        const lambda = this._callbacks[callback];\n        return lambda ? lambda.apply(this) : undefined;\n    }\n\n    // Track the provided listener. A persistent listener means it remains\n    // tracked even if the info window is closed.\n    trackListener(listener, persistent) {\n        this._listeners.push({listener, persistent});\n    }\n\n    // Will clear all listeners that are used during the open state.\n    clearListeners(clearPersistent) {\n        if (google) {\n            if (this._listeners) {\n                this._listeners.forEach((e) => {\n                    if (clearPersistent || !e.persistent) {\n                        google.maps.event.removeListener(e.listener);\n                        e.listener = null;\n                    }\n                });\n                this._listeners = this._listeners.filter((e) => {\n                    return e.listener != null;\n                });\n            }\n        }\n    }\n\n    isOpen() {\n        return this._isOpen;\n    }\n\n    // Open the info window after attaching to a specific marker.\n    open() {\n        const result = this.activateCallback('beforeOpen');\n        if (result !== undefined && !result) {\n            return;\n        }\n        if (this._marker) {\n            this.setMap(this._marker.getMap());\n        } else if (this._map && this._position) {\n            this.setMap(this._map);\n        }\n    }\n\n    // Close the info window.\n    close() {\n        const result = this.activateCallback('beforeClose');\n        if (result !== undefined && !result) {\n            return;\n        }\n        this.clearListeners();\n        this.setMap(null);\n    }\n\n    // Force close the map and remove any event listeners attached to google\n    destroy() {\n        if (this.getMap()) {\n            this.setMap(null);\n        }\n        // Make sure to clear all persistent listeners\n        this.clearListeners(true);\n    }\n\n    setContent(content) {\n        this._opts.content = content;\n        if (this._html && this._html.content) {\n            setHTML(this._html.content, content);\n        }\n    }\n\n    setPosition(latLng) {\n        this._position = toLatLng(latLng);\n        if (this._isOpen && this._position) {\n            this.draw();\n            this.resize();\n            this.reposition();\n        }\n    }\n\n    getWrapper() {\n        if (this._html) {\n            return this._html.wrapper;\n        }\n        return null;\n    }\n\n    // Implementation of OverlayView draw method.\n    draw() {\n        if (!this.getMap() || !this._html) {\n            return;\n        }\n        if (!this._marker && !this._position) {\n            return;\n        }\n\n        // 1. Assign offset\n        const offset = this._opts.offset;\n        if (offset) {\n            if (offset.left) {\n                this._html.wrapper.style.marginLeft = offset.left;\n            }\n            if (offset.top) {\n                this._html.wrapper.style.marginTop = offset.top;\n            }\n        }\n        // 2. Set the background color\n        const bg = this._opts.backgroundColor;\n        if (bg) {\n            this._html.contentWrapper.style.backgroundColor = bg;\n            if (this._opts.pointer) {\n                this._html.pointerBg.style[`border${capitalizePlacement(this._opts.placement)}Color`] = bg;\n            }\n        }\n        // 3. Padding\n        if (this._opts.padding) {\n            this._html.contentWrapper.style.padding = this._opts.padding;\n            if (this._opts.shadow) {\n                this._html.shadowFrame.style.padding = this._opts.padding;\n            }\n        }\n        // 4. Border radius\n        if (this._opts.borderRadius) {\n            this._html.contentWrapper.style.borderRadius = this._opts.borderRadius;\n            if (this._opts.shadow) {\n                this._html.shadowFrame.style.borderRadius = this._opts.borderRadius;\n            }\n        }\n        // 5. Font Size\n        if (this._opts.fontSize) {\n            this._html.wrapper.style.fontSize = this._opts.fontSize;\n        }\n        // 6. Font Color\n        if (this._opts.fontColor) {\n            this._html.contentWrapper.style.color = this._opts.fontColor;\n        }\n        // 7. Pointer\n        // Check if the pointer is enabled. Also make sure the value isn't just the boolean true.\n        if (this._opts.pointer && this._opts.pointer !== true) {\n            if (this._opts.shadow) {\n                this._html.shadowPointer.style.width = this._opts.pointer;\n                this._html.shadowPointer.style.height = this._opts.pointer;\n            }\n            if (this._html.pointerBorder) {\n                this._html.pointerBorder.style.borderWidth = this._opts.pointer;\n            }\n            this._html.pointerBg.style.borderWidth = this._opts.pointer;\n        }\n\n        // 8. Border\n        if (this._opts.border) {\n            // Calculate the border width\n            let bWidth = 0;\n            if (this._opts.border.width !== undefined) {\n                bWidth = parseAttribute(this._opts.border.width, '0px');\n                this._html.contentWrapper.style.borderWidth = bWidth.value + bWidth.units;\n            }\n            bWidth = Math.round((this._html.contentWrapper.offsetWidth -\n                this._html.contentWrapper.clientWidth) / 2.0);\n            bWidth = parseAttribute(`${bWidth}px`, '0px');\n\n            if (this._opts.pointer) {\n                // Calculate the pointer length\n                let pLength = Math.min(this._html.pointerBorder.offsetHeight,\n                    this._html.pointerBorder.offsetWidth);\n                pLength = parseAttribute(`${pLength}px`, '0px');\n\n                let triangleDiff = Math.round(bWidth.value * (_root2 - 1));\n                triangleDiff = Math.min(triangleDiff, pLength.value);\n\n                this._html.pointerBg.style.borderWidth =\n                    (pLength.value - triangleDiff) + pLength.units;\n\n                const reverseP = capitalizePlacement(oppositePlacement(this._opts.placement));\n                this._html.pointerBg.style[`margin${reverseP}`] =\n                    triangleDiff + bWidth.units;\n                this._html.pointerBg.style[this._opts.placement] =\n                    -bWidth.value + bWidth.units;\n            }\n            const color = this._opts.border.color;\n            if (color) {\n                this._html.contentWrapper.style.borderColor = color;\n                if (this._html.pointerBorder) {\n                    this._html.pointerBorder.style[`border${capitalizePlacement(this._opts.placement)}Color`] = color;\n                }\n            }\n        }\n        // 9. Shadow\n        if (this._opts.shadow) {\n            // Check if any of the shadow settings have actually been set\n            const shadow = this._opts.shadow;\n            const isSet = (attribute) => {\n                const v = shadow[attribute];\n                return v !== undefined && v != null;\n            };\n\n            if (isSet('h') || isSet('v') || isSet('blur') || isSet('spread') || isSet('color')) {\n                const hOffset = parseAttribute(shadow.h, _defaultShadow.h);\n                const vOffset = parseAttribute(shadow.v, _defaultShadow.v);\n                const blur = parseAttribute(shadow.blur, _defaultShadow.blur);\n                const spread = parseAttribute(shadow.spread, _defaultShadow.spread);\n                const color = shadow.color || _defaultShadow.color;\n                const formatBoxShadow = (h, v) => {\n                    return `${h} ${v} ${blur.original} ${spread.original} ${color}`;\n                };\n\n                this._html.shadowFrame.style.boxShadow =\n                    formatBoxShadow(hOffset.original, vOffset.original);\n\n                // Correctly rotate the shadows before the css transform\n                const hRotated = (_inverseRoot2 * (hOffset.value - vOffset.value)) + hOffset.units;\n                const vRotated = (_inverseRoot2 * (hOffset.value + vOffset.value)) + vOffset.units;\n                this._html.shadowPointerInner.style.boxShadow = formatBoxShadow(hRotated, vRotated);\n            }\n            if (this._opts.shadow.opacity) {\n                this._html.shadowWrapper.style.opacity = this._opts.shadow.opacity;\n            }\n        }\n\n        const divPixel = this.getProjection()\n            .fromLatLngToDivPixel(this._position || this._marker.position);\n        if (divPixel) {\n            this._html.floatWrapper.style.top = `${Math.floor(divPixel.y)}px`;\n            this._html.floatWrapper.style.left = `${Math.floor(divPixel.x)}px`;\n        }\n        if (!this._isOpen) {\n            this._isOpen = true;\n            this.resize();\n            this.reposition();\n            this.activateCallback('afterOpen');\n            if (google) {\n                google.maps.event.trigger(this.getMap(), `${_eventPrefix}opened`, this);\n            }\n        }\n    }\n\n    // Implementation of OverlayView onAdd method.\n    onAdd() {\n        if (this._html) {\n            return;\n        }\n        // Used for creating new elements\n        const applyCss = (element, args) => {\n            if (element && args) {\n                for (let i = 0; i < args.length; i++) {\n                    const className = args[i];\n                    if (className) {\n                        if (element.className) {\n                            element.className += ' ';\n                        }\n                        element.className += _classPrefix + className;\n                    }\n                }\n            }\n        };\n        const newElement = (...args) => {\n            const element = document.createElement('div');\n            applyCss(element, args);\n            return element;\n        };\n\n        this._html = {};\n\n        // 1. Create the wrapper\n        this._html.wrapper = newElement(\n            `wrapper-${this._opts.placement}`\n        );\n        if (this._opts.wrapperClass) {\n            this._html.wrapper.className += ` ${this._opts.wrapperClass}`;\n        }\n        if (this._opts.border) {\n            applyCss(this._html.wrapper, ['has-border']);\n        }\n\n        // 2. Create the shadow\n        if (this._opts.shadow) {\n            this._html.shadowWrapper = newElement(\n                `shadow-wrapper-${this._opts.placement}`\n            );\n            this._html.shadowFrame = newElement(\n                'frame',\n                'shadow-frame'\n            );\n            this._html.shadowWrapper.appendChild(this._html.shadowFrame);\n\n            if (this._opts.pointer) {\n                this._html.shadowPointer = newElement(\n                    `shadow-pointer-${this._opts.placement}`\n                );\n                this._html.shadowPointerInner = newElement(\n                    `shadow-inner-pointer-${this._opts.placement}`\n                );\n                this._html.shadowPointer.appendChild(this._html.shadowPointerInner);\n                this._html.shadowWrapper.appendChild(this._html.shadowPointer);\n            }\n\n            this._html.wrapper.appendChild(this._html.shadowWrapper);\n        }\n\n        // 3. Create the content\n        this._html.contentWrapper = newElement(\n            'frame',\n            'content-wrapper'\n        );\n        this._html.content = newElement(\n            'content'\n        );\n        if (this._opts.content) {\n            setHTML(this._html.content, this._opts.content);\n        }\n\n        // 4. Create the close button\n        if (this._opts.showCloseButton) {\n            if (this._opts.closeButtonMarkup) {\n                const d = document.createElement('div');\n                setHTML(d, this._opts.closeButtonMarkup);\n                this._html.closeButton = d.firstChild;\n            } else {\n                this._html.closeButton = document.createElement('button');\n                this._html.closeButton.setAttribute('type', 'button');\n                this._html.closeButton.innerHTML = '&#215;';\n                applyCss(this._html.closeButton, ['close-button']);\n            }\n            this._html.contentWrapper.appendChild(this._html.closeButton);\n        }\n        this._html.contentWrapper.appendChild(this._html.content);\n        this._html.wrapper.appendChild(this._html.contentWrapper);\n\n        // 5. Create the pointer\n        if (this._opts.pointer) {\n            if (this._opts.border) {\n                this._html.pointerBorder = newElement(\n                    `pointer-${this._opts.placement}`,\n                    `pointer-border-${this._opts.placement}`\n                );\n                this._html.wrapper.appendChild(this._html.pointerBorder);\n            }\n            this._html.pointerBg = newElement(\n                `pointer-${this._opts.placement}`,\n                `pointer-bg-${this._opts.placement}`\n            );\n            this._html.wrapper.appendChild(this._html.pointerBg);\n        }\n\n        // Create an outer wrapper\n        this._html.floatWrapper = newElement(\n            'float-wrapper'\n        );\n        this._html.floatWrapper.appendChild(this._html.wrapper);\n\n        // Add the wrapper to the Google Maps float pane\n        this.getPanes().floatPane.appendChild(this._html.floatWrapper);\n\n        // Now add all the event listeners\n        const map = this.getMap();\n        this.clearListeners();\n        if (this._opts.closeOnMapClick) {\n            this.trackListener(google.maps.event.addListener(map, 'click', () => {\n                this.close();\n            }));\n        }\n        if (this._opts.closeWhenOthersOpen) {\n            this.trackListener(google.maps.event.addListener(map, `${_eventPrefix}opened`, (other) => {\n                if (this !== other) {\n                    this.close();\n                }\n            }));\n        }\n        if (google) {\n            // Clear out the previous map bounds\n            this._previousWidth = null;\n            this._previousHeight = null;\n            this.trackListener(google.maps.event.addListener(map, 'bounds_changed', () => {\n                const d = map.getDiv();\n                const ow = d.offsetWidth;\n                const oh = d.offsetHeight;\n                const pw = this._previousWidth;\n                const ph = this._previousHeight;\n                if (pw === null || ph === null || pw !== ow || ph !== oh) {\n                    this._previousWidth = ow;\n                    this._previousHeight = oh;\n                    this.resize();\n                }\n            }));\n\n            // Marker moves\n            if (this._marker) {\n                this.trackListener(google.maps.event.addListener(this._marker,\n                    'position_changed', () => {\n                        this.draw();\n                    }));\n            }\n\n            // Close button\n            if (this._opts.showCloseButton && !this._opts.closeButtonMarkup) {\n                this.trackListener(google.maps.event.addDomListener(this._html.closeButton,\n                    'click', (e) => {\n                        e.cancelBubble = true;\n                        if (e.stopPropagation) {\n                            e.stopPropagation();\n                        }\n                        this.close();\n                    }));\n            }\n\n            // Stop the mouse event propagation\n            const mouseEvents = ['click', 'dblclick', 'rightclick', 'contextmenu',\n                'drag', 'dragend', 'dragstart',\n                'mousedown', 'mouseout', 'mouseover', 'mouseup',\n                'touchstart', 'touchend', 'touchmove',\n                'wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];\n            mouseEvents.forEach((event) => {\n                this.trackListener(google.maps.event.addDomListener(this._html.wrapper,\n                    event, (e) => {\n                        e.cancelBubble = true;\n                        if (e.stopPropagation) {\n                            e.stopPropagation();\n                        }\n                    }));\n            });\n        }\n\n\n        this.activateCallback('open');\n    }\n\n    // Implementation of OverlayView onRemove method\n    onRemove() {\n        this.activateCallback('close');\n        if (this._html) {\n            const parent = this._html.floatWrapper.parentElement;\n            if (parent) {\n                parent.removeChild(this._html.floatWrapper);\n            }\n            this._html = null;\n        }\n        this._isOpen = false;\n        this.activateCallback('afterClose');\n    }\n\n    // The map inner bounds used for panning and resizing\n    getMapInnerBounds() {\n        const mb = this.getMap().getDiv().getBoundingClientRect();\n        const mib = {\n            top: mb.top + this._opts.edgeOffset.top,\n            right: mb.right - this._opts.edgeOffset.right,\n            bottom: mb.bottom - this._opts.edgeOffset.bottom,\n            left: mb.left + this._opts.edgeOffset.left\n        };\n        mib.width = mib.right - mib.left;\n        mib.height = mib.bottom - mib.top;\n        return mib;\n    }\n\n    // Pan the Google Map such that the info window is visible\n    reposition() {\n        if (!this._opts.panOnOpen || !this._html) {\n            return;\n        }\n        const mib = this.getMapInnerBounds();\n        const wb = this._html.wrapper.getBoundingClientRect();\n        let dx = 0;\n        let dy = 0;\n        if (mib.left >= wb.left) {\n            dx = wb.left - mib.left;\n        } else if (mib.right <= wb.right) {\n            dx = wb.left - (mib.right - wb.width);\n        }\n        if (mib.top >= wb.top) {\n            dy = wb.top - mib.top;\n        } else if (mib.bottom <= wb.bottom) {\n            dy = wb.top - (mib.bottom - wb.height);\n        }\n        if (dx !== 0 || dy !== 0) {\n            this.getMap().panBy(dx, dy);\n        }\n    }\n\n    // Resize the info window to fit within the map bounds and edge offset\n    resize() {\n        if (!this._html) {\n            return;\n        }\n        const mib = this.getMapInnerBounds();\n        // Handle the max width\n        let maxWidth = mib.width;\n        if (this._opts.maxWidth !== undefined) {\n            maxWidth = Math.min(maxWidth, this._opts.maxWidth);\n        }\n        maxWidth -= (this._html.wrapper.offsetWidth - this._html.content.offsetWidth);\n        this._html.content.style.maxWidth = `${maxWidth}px`;\n\n        // Handle the max height\n        let maxHeight = mib.height;\n        if (this._opts.maxHeight !== undefined) {\n            maxHeight = Math.min(maxHeight, this._opts.maxHeight);\n        }\n        maxHeight -= (this._html.wrapper.offsetHeight - this._html.content.offsetHeight);\n        this._html.content.style.maxHeight = `${maxHeight}px`;\n    }\n}\n"]}